!function(e,r){for(var n in r)e[n]=r[n]}(exports,function(e){var r={};function n(t){if(r[t])return r[t].exports;var i=r[t]={i:t,l:!1,exports:{}};return e[t].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=r,n.d=function(e,r,t){n.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,r){if(1&r&&(e=n(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var i in e)n.d(t,i,function(r){return e[r]}.bind(null,i));return t},n.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(r,"a",r),r},n.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},n.p="",n(n.s=4)}([function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});r.validInterfaceElements=["screen","button","message","app","counter"];r.validActions=["show","enable","disable","hide","reset","finish"];r.validEvents=["click","init","finish"];r.validTimeUnits=["s","m","ms"];r.validAppCmds=["INIT","RESET","FINISH"];r.defaultData={events:{init:[],finish:[],click:[]},interface:{button:[],message:[],counter:[],screen:[]},actions:{},errors:[],controllers:[],responses:[]}},function(e,r,n){"use strict";var t=this&&this.__spreadArrays||function(){for(var e=0,r=0,n=arguments.length;r<n;r++)e+=arguments[r].length;var t=Array(e),i=0;for(r=0;r<n;r++)for(var o=arguments[r],s=0,a=o.length;s<a;s++,i++)t[i]=o[s];return t};Object.defineProperty(r,"__esModule",{value:!0});var i=function(e){var r=[];for(var n in e)n&&r.push(n);return r};r.getKeys=i;var o=function(e){return e&&e.constructor==Object};r.isObj=o;r.isStr=function(e){return e&&e.constructor==String};var s=function(e){return e&&e.constructor==Array};r.isArr=s;r.cloneDeep=function(e){return JSON.parse(JSON.stringify(e))};var a=function(e,r,n){if(!e&&!r)return null;if(!e)return r;if(!r)return e;if(o(e)&&o(r)){var u={},c=i(e),l=i(r);return c.forEach((function(t){u[t]=a(e[t],r[t],n)})),l.forEach((function(t){c.includes(t)||(u[t]=a(e[t],r[t],n))})),u}var d;return s(e)&&s(r)?(n?d=e.concat(r):(d=t(e),r.forEach((function(e){d.includes(e)||d.push(e)}))),d):r};r.merge=a;r.messageErrors={inLine:function(e){return"Erro na linha "+e},invalidCommand:function(e,r){return"Sintaxe incorreta: "+e+'\nComando "'+r+'" não identificado.'},invalidElement:function(e,r){return"Sintaxe incorreta: "+e+'\nElemento "'+r+'" inválido.'},invalidResponse:function(e,r){return"Sintaxe incorreta: "+e+'\nResposta "'+r+'" inválida.'},invalidConsequence:function(e,r){return"Sintaxe incorreta: "+e+'\nConsequência "'+r+'" inválida.'},invalidPoints:function(e){return"Sintaxe incorreta: "+e+"\nA quantidade de pontos parece incorreta."},invalidContingence:function(e){return"Sintaxe incorreta: "+e+'\nContingência "'+e+'" inválida.'},invalidContingenceInterval:function(e){return"Sintaxe incorreta: "+e+'\nIntervalo de contingência inválido: "'+e+'"'},undefinedElement:function(e){return'Erro semântico, o elemento "'+e+'" não existe'},invalidInput:function(e){return"Entrada inválida "+e},codeError:function(e){return"Erro no código:\n  "+e.join("\n")},alreadyStarted:function(){return"O app já foi iniciado"},notAlreadyStarted:function(){return"O app não foi iniciado"},bug:function(e){return"Erro catastrófico! "+e}};r.convertTime=function(e,r){switch(r){case"ms":return e;case"s":return 1e3*e;case"m":return 6e4*e}}},function(e,r,n){"use strict";var t;Object.defineProperty(r,"__esModule",{value:!0}),function(e){e[e.Response=0]="Response",e[e.Contingence=1]="Contingence",e[e.Consequence=2]="Consequence",e[e.Condition=3]="Condition",e[e.Error=4]="Error"}(t||(t={})),r.Type=t;var i=function(e){return e.replace(/\#.+\n/g,"\n").replace(/ +/g,"").replace(/\n{2,}/g,"\n")};r.cleanCode=i;var o=function(e){return e.split(/\n/g).filter((function(e){return e}))};r.splitCode=o;var s=function(e,r){var n={text:e,type:t.Error};return/^R\d+=/.test(e)?n.type=t.Response:/^C\d+=/.test(e)?n.type=t.Consequence:/^&\d+=/.test(e)?n.type=t.Contingence:/^@\d+=/.test(e)&&(n.type=t.Condition),n};r.lineTokenizer=s;var a=function(e){return e.map((function(e,r){return s(e)}))};r.tokenizer=a;r.tokenize=function(e){return a(o(i(e)))}},function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=n(2),i=n(1),o=n(0),s=/-(\d+)([ms]{1,2})$/,a=/\*(\d+)$/,u=/\|/;r.codeParser=function(e){var r=i.cloneDeep(o.defaultData);return e.forEach((function(e){var n,c,l,d,p,f,v,m,g;switch(e.type){case t.Type.Response:c=e.text,l=c.split("="),d=l[0],p=l[1].split("."),f=p[0],v=p[1],m=p[2],g=i.cloneDeep(o.defaultData),2==p.length?o.validEvents.includes(p[1])?g.events[p[1]].push(d):g.errors.push(i.messageErrors.invalidCommand(c,p[1])):3==p.length?o.validInterfaceElements.includes(f)?o.validEvents.includes(m)?(g.events[m].push(v+":"+d),g.interface[f].includes(v)||g.interface[f].push(v)):g.errors.push(i.messageErrors.invalidResponse(c,m)):g.errors.push(i.messageErrors.invalidElement(c,f)):g.errors.push(i.messageErrors.invalidPoints(c)),g.responses.includes(d)||g.responses.push(d),n=g;break;case t.Type.Consequence:n=function(e){var r=e.split("="),n=r[0],t=i.cloneDeep(o.defaultData),s=r[1].split("|").map((function(e){return e.split(".")}));return t.actions[n]=[],s.forEach((function(r){var s=r[0],a=r[1],u=r[2];2==r.length?o.validActions.includes(r[1])?t.actions[n].push("app:"+r[1]):t.errors.push(i.messageErrors.invalidCommand(e,r[1])):3==r.length?o.validActions.includes(u)?(t.actions[n].push(a+":"+u),t.interface[s].includes(a)||t.interface[s].push(a)):t.errors.push(i.messageErrors.invalidConsequence(e,u)):t.errors.push(i.messageErrors.invalidPoints(e))})),t}(e.text);break;case t.Type.Contingence:n=function(e){var r=i.cloneDeep(o.defaultData),n={input:"",output:null,runAfter:{attempts:1,time:0,timeUnit:null}};try{var t=e.split("=")[1].split(/->/),c=t[0],l=t[1];s.test(c)&&(c=c.replace(s,(function(t,s,a){return(s=Number(s))&&o.validTimeUnits.includes(a)?(n.runAfter.time=s,n.runAfter.timeUnit=a):r.errors.push(i.messageErrors.invalidContingenceInterval(e)),""}))),a.test(c)&&(c=c.replace(a,(function(t,o){return(o=Number(o))?n.runAfter.attempts=o:r.errors.push(i.messageErrors.invalidContingenceInterval(e)),""}))),n.input=c;var d=void 0;d=u.test(l)?l.split("|"):[l],n.output=d,r.controllers.push(n)}catch(n){r.errors.push(i.messageErrors.invalidContingence(e))}return r}(e.text);break;case t.Type.Error:n={errors:r.errors.concat([i.messageErrors.inLine(e.text)])}}n?r=i.merge(r,n):n={errors:r.errors.concat([i.messageErrors.bug(e.text)])}})),r};r.semanticAnalyse=function(e){var r=i.cloneDeep(e),n=i.getKeys(r.actions);return e.controllers.forEach((function(e){r.responses.includes(e.input)||r.errors.push(i.messageErrors.undefinedElement(e.input)),e.output.forEach((function(t){n.includes(t)||r.errors.push(i.messageErrors.undefinedElement(e.output))}))})),r}},function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=n(0);r._defaultData=t.defaultData,r.validActions=t.validActions,r.validEvents=t.validEvents,r.validTimeUnits=t.validTimeUnits,r.validInterfaceElements=t.validInterfaceElements,r.validAppCmds=t.validAppCmds;var i=n(2);r._Type=i.Type,r._tokenize=i.tokenize,r._cleanCode=i.cleanCode,r._splitCode=i.splitCode,r._lineTokenizer=i.lineTokenizer,r._tokenizer=i.tokenizer;var o=n(3);r.codeParser=o.codeParser,r.semanticAnalyse=o.semanticAnalyse;var s=n(5);r.createMachine=s.createMachine,r.interpreter=s.interpreter;var a=n(1);r._isObj=a.isObj,r._isStr=a.isStr,r._isArr=a.isArr,r._merge=a.merge,r._cloneDeep=a.cloneDeep,r._messageErrors=a.messageErrors,r._getKeys=a.getKeys,r._convertTime=a.convertTime},function(e,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=n(1),i=n(0),o=n(3),s={initialized:!1,counters:{},intervals:{},variables:{},timer:-1,elapsed:0,history:[]},a=function(e,r){if(void 0===r&&(r=200),e.errors.length>0)return function(){return{error:t.messageErrors.codeError(e.errors),run:!1,data:e}};var n=t.cloneDeep(s),o=i.validAppCmds.concat(e.responses);n.timer=setInterval((function(){if(n.initialized){for(var e in n.intervals)e&&(n.intervals[e]+=-r,n.intervals[e]<0&&(n.intervals[e]=0));n.elapsed=Date.now()-n.history[0].at}}),r);var a=function(r){var i={error:"",run:!1,elapsed:n.elapsed,at:Date.now(),history:null};if(!o.includes(r))return i.error=t.messageErrors.invalidInput(r.toString()),i;switch(r){case"INIT":return n.initialized?(i.error=t.messageErrors.alreadyStarted(),i):(n.initialized=!0,e.controllers.forEach((function(e){n.counters[e.input]=0,e.runAfter.time&&(n.intervals[e.input]=t.convertTime(e.runAfter.time,e.runAfter.unit))})),i.run="INIT",n.history.push(t.cloneDeep(i)),i);case"RESET":return i.error="BUG",i;case"FINISH":return n.initialized?(i.run="FINISH",n.history.push(t.cloneDeep(i)),i.history=n.history,clearInterval(n.timer),i):(i.error=t.messageErrors.notAlreadyStarted(),i)}if(!n.initialized)return i.error=t.messageErrors.notAlreadyStarted(),i;n.counters[r]+=1;var s=[];return e.controllers.forEach((function(e){e.input==r&&(1==e.runAfter.attempts?s=e.output:e.runAfter.attemprs>1&&n.counters[r]==e.runAfter.attempts&&(n.counters[r]=0,s=e.output)),i.run=s})),s.length>0&&n.history.push(t.cloneDeep(i)),i};return a.state=n,a};r.createMachine=a;r.interpreter=function(e){var r=o.codeParser(e),n=o.semanticAnalyse(r);return a(n)}}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,